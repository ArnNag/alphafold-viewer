/**
 * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
import { TrajectoryHierarchyPresetProvider } from 'molstar/lib/mol-plugin-state/builder/structure/hierarchy-preset';
import { PluginStateObject } from 'molstar/lib/mol-plugin-state/objects';
import { StructureRepresentationPresetProvider } from 'molstar/lib/mol-plugin-state/builder/structure/representation-preset';
import { StateObjectSelector, StateObject, StateTransformer } from 'molstar/lib/mol-state';
import { Mat4 } from 'molstar/lib/mol-math/linear-algebra';
import { Target } from './selection';
declare type BaseProps = {
    assemblyId?: string;
    modelIndex?: number;
    plddt?: 'off' | 'single-chain' | 'on';
};
export { Mat4 } from 'molstar/lib/mol-math/linear-algebra';
export declare type AlignmentProps = {
    kind: 'alignment';
    targets?: (Target & {
        matrix?: Mat4;
    })[];
    colors: {
        value: number;
        targets: Target[];
    }[];
} & BaseProps;
export declare type EmptyProps = {
    kind: 'empty';
} & BaseProps;
declare type ValidationProps = {
    kind: 'validation';
    colorTheme?: string;
    showClashes?: boolean;
} & BaseProps;
declare type StandardProps = {
    kind: 'standard';
} & BaseProps;
declare type SymmetryProps = {
    kind: 'symmetry';
    symmetryIndex?: number;
} & BaseProps;
declare type FeatureProps = {
    kind: 'feature';
    target: Target;
} & BaseProps;
declare type DensityProps = {
    kind: 'density';
} & BaseProps;
declare type MembraneProps = {
    kind: 'membrane';
} & BaseProps;
declare type FeatureDensityProps = {
    kind: 'feature-density';
    target: Target;
    radius?: number;
    hiddenChannels?: string[];
} & BaseProps;
export declare type MotifProps = {
    kind: 'motif';
    label?: string;
    targets: Target[];
    color?: number;
} & BaseProps;
export declare type NakbProps = {
    kind: 'nakb';
} & BaseProps;
export declare type PresetProps = ValidationProps | StandardProps | SymmetryProps | FeatureProps | DensityProps | AlignmentProps | MembraneProps | FeatureDensityProps | MotifProps | NakbProps | EmptyProps;
declare type StructureObject = StateObjectSelector<PluginStateObject.Molecule.Structure, StateTransformer<StateObject<any, StateObject.Type<any>>, StateObject<any, StateObject.Type<any>>, any>>;
export declare const RcsbPreset: TrajectoryHierarchyPresetProvider<{
    preset: PresetProps;
}, {
    model: StateObjectSelector<PluginStateObject.Molecule.Model, StateTransformer<StateObject<any, StateObject.Type<any>>, StateObject<any, StateObject.Type<any>>, any>>;
    modelProperties: StateObjectSelector<PluginStateObject.Molecule.Model, StateTransformer<StateObject<any, StateObject.Type<any>>, StateObject<any, StateObject.Type<any>>, any>>;
    unitcell: StateObjectSelector<StateObject<any, StateObject.Type<any>>, StateTransformer<StateObject<any, StateObject.Type<any>>, StateObject<any, StateObject.Type<any>>, any>> | undefined;
    structure: StructureObject | undefined;
    structureProperties: StructureObject | undefined;
    representation: StructureRepresentationPresetProvider.Result | undefined;
}>;
