"use strict";
/**
 * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Mandar Deshpande <mandar@ebi.ac.uk>
 * @author David Sehnal <david.sehnal@gmail.com>
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @author Sebastian Bittrich <sebastian.bittrich@rcsb.org>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PLDDTConfidenceProvider = exports.PLDDTConfidenceParams = exports.PLDDTConfidence = void 0;
var tslib_1 = require("tslib");
var db_1 = require("molstar/lib/mol-data/db");
var schema_1 = require("molstar/lib/mol-io/reader/cif/schema");
var structure_1 = require("molstar/lib/mol-model/structure");
var param_definition_1 = require("molstar/lib/mol-util/param-definition");
var mmcif_1 = require("molstar/lib/mol-model-formats/structure/mmcif");
var custom_model_property_1 = require("molstar/lib/mol-model-props/common/custom-model-property");
var custom_property_1 = require("molstar/lib/mol-model/custom-property");
var array_1 = require("molstar/lib/mol-util/array");
var date_1 = require("molstar/lib/mol-util/date");
var PLDDTConfidence;
(function (PLDDTConfidence) {
    var AlphaFoldNamespace = 'AF-';
    var BakerNamespace = 'MA-BAK-';
    function isApplicable(model) {
        if (!model || !mmcif_1.MmcifFormat.is(model.sourceData))
            return false;
        var entryId = model.entryId.toUpperCase();
        if (!entryId.startsWith(AlphaFoldNamespace) && !entryId.startsWith(BakerNamespace))
            return false;
        return model.sourceData.data.frame.categoryNames.includes('ma_qa_metric_local');
    }
    PLDDTConfidence.isApplicable = isApplicable;
    PLDDTConfidence.Schema = {
        local_metric_values: {
            label_asym_id: db_1.Column.Schema.str,
            label_comp_id: db_1.Column.Schema.str,
            label_seq_id: db_1.Column.Schema.int,
            metric_id: db_1.Column.Schema.int,
            metric_value: db_1.Column.Schema.float,
            model_id: db_1.Column.Schema.int,
            ordinal_id: db_1.Column.Schema.int
        }
    };
    function tryGetInfoFromCif(categoryName, model) {
        if (!mmcif_1.MmcifFormat.is(model.sourceData) || !model.sourceData.data.frame.categoryNames.includes(categoryName)) {
            return;
        }
        var timestampField = model.sourceData.data.frame.categories[categoryName].getField('metric_value');
        if (!timestampField || timestampField.rowCount === 0)
            return;
        return { timestamp_utc: timestampField.str(0) || (0, date_1.dateToUtcString)(new Date()) };
    }
    function fromCif(ctx, model) {
        var info = tryGetInfoFromCif('ma_qa_metric_local', model);
        if (!info)
            return;
        var data = getCifData(model);
        var metricMap = createScoreMapFromCif(model, data.residues);
        return { info: info, data: metricMap };
    }
    PLDDTConfidence.fromCif = fromCif;
    function obtain(ctx, model, _props) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var cif;
            return (0, tslib_1.__generator)(this, function (_a) {
                cif = fromCif(ctx, model);
                return [2 /*return*/, { value: cif }];
            });
        });
    }
    PLDDTConfidence.obtain = obtain;
    function getConfidenceScore(e) {
        if (!structure_1.Unit.isAtomic(e.unit))
            return [-1, 'No Score'];
        var prop = exports.PLDDTConfidenceProvider.get(e.unit.model).value;
        if (!prop || !prop.data)
            return [-1, 'No Score'];
        var rI = e.unit.residueIndex[e.element];
        return prop.data.score.has(rI) ? prop.data.score.get(rI) : [-1, 'No Score'];
    }
    PLDDTConfidence.getConfidenceScore = getConfidenceScore;
    var _emptyArray = [];
    function getCategories(structure) {
        if (!structure)
            return _emptyArray;
        var prop = exports.PLDDTConfidenceProvider.get(structure.models[0]).value;
        if (!prop || !prop.data)
            return _emptyArray;
        return prop.data.category;
    }
    PLDDTConfidence.getCategories = getCategories;
    function getCifData(model) {
        if (!mmcif_1.MmcifFormat.is(model.sourceData))
            throw new Error('Data format must be mmCIF.');
        return {
            residues: (0, schema_1.toTable)(PLDDTConfidence.Schema.local_metric_values, model.sourceData.data.frame.categories.ma_qa_metric_local),
        };
    }
})(PLDDTConfidence = exports.PLDDTConfidence || (exports.PLDDTConfidence = {}));
exports.PLDDTConfidenceParams = {};
exports.PLDDTConfidenceProvider = custom_model_property_1.CustomModelProperty.createProvider({
    label: 'pLDDT Confidence Score',
    descriptor: (0, custom_property_1.CustomPropertyDescriptor)({
        name: 'plddt_confidence_score'
    }),
    type: 'static',
    defaultParams: exports.PLDDTConfidenceParams,
    getParams: function () { return exports.PLDDTConfidenceParams; },
    isApplicable: function (data) { return PLDDTConfidence.isApplicable(data); },
    obtain: function (ctx, data, props) { return (0, tslib_1.__awaiter)(void 0, void 0, void 0, function () {
        var p;
        return (0, tslib_1.__generator)(this, function (_a) {
            switch (_a.label) {
                case 0:
                    p = (0, tslib_1.__assign)((0, tslib_1.__assign)({}, param_definition_1.ParamDefinition.getDefaultValues(exports.PLDDTConfidenceParams)), props);
                    return [4 /*yield*/, PLDDTConfidence.obtain(ctx, data, p)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    }); }
});
function createScoreMapFromCif(modelData, residueData) {
    var label_asym_id = residueData.label_asym_id, label_seq_id = residueData.label_seq_id, metric_value = residueData.metric_value, _rowCount = residueData._rowCount;
    var ret = new Map();
    var categories = [];
    var toCategory = function (v) {
        if (v > 50 && v <= 70)
            return 'Low';
        if (v > 70 && v <= 90)
            return 'Confident';
        if (v > 90)
            return 'Very high';
        return 'Very low';
    };
    var entityMap = new Map();
    for (var i = 0; i < _rowCount; i++) {
        var confidenceScore = metric_value.value(i);
        var labelAsymId = label_asym_id.value(i);
        if (!entityMap.has(labelAsymId))
            entityMap.set(labelAsymId, (modelData.atomicHierarchy.index.findEntity(labelAsymId) + 1).toString());
        var entityId = entityMap.get(labelAsymId);
        var idx = modelData.atomicHierarchy.index.findResidue(entityId, labelAsymId, label_seq_id.value(i));
        var confidenceCategory = toCategory(confidenceScore);
        ret.set(idx, [confidenceScore, confidenceCategory]);
        (0, array_1.arraySetAdd)(categories, confidenceCategory);
    }
    return {
        score: structure_1.IndexedCustomProperty.fromResidueMap(ret),
        category: categories
    };
}
