"use strict";
/**
 * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Mandar Deshpande <mandar@ebi.ac.uk>
 * @author Sebastian Bittrich <sebastian.bittrich@rcsb.org>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PLDDTConfidenceColorThemeProvider = exports.PLDDTConfidenceColorTheme = exports.getPLDDTConfidenceColorThemeParams = void 0;
var prop_1 = require("./prop");
var structure_1 = require("molstar/lib/mol-model/structure");
var color_1 = require("molstar/lib/mol-util/color");
var param_definition_1 = require("molstar/lib/mol-util/param-definition");
var legend_1 = require("molstar/lib/mol-util/legend");
var DefaultColor = (0, color_1.Color)(0xaaaaaa);
var ConfidenceColors = {
    'No Score': DefaultColor,
    'Very low': (0, color_1.Color)(0xff7d45),
    'Low': (0, color_1.Color)(0xffdb13),
    'Confident': (0, color_1.Color)(0x65cbf3),
    'Very high': (0, color_1.Color)(0x0053d6)
};
var ConfidenceColorLegend = (0, legend_1.TableLegend)(Object.entries(ConfidenceColors));
function getPLDDTConfidenceColorThemeParams(ctx) {
    var categories = prop_1.PLDDTConfidence.getCategories(ctx.structure);
    if (categories.length === 0) {
        return {
            type: param_definition_1.ParamDefinition.MappedStatic('score', {
                'score': param_definition_1.ParamDefinition.Group({})
            })
        };
    }
    return {
        type: param_definition_1.ParamDefinition.MappedStatic('score', {
            'score': param_definition_1.ParamDefinition.Group({}),
            'category': param_definition_1.ParamDefinition.Group({
                kind: param_definition_1.ParamDefinition.Select(categories[0], param_definition_1.ParamDefinition.arrayToOptions(categories))
            }, { isFlat: true })
        })
    };
}
exports.getPLDDTConfidenceColorThemeParams = getPLDDTConfidenceColorThemeParams;
function PLDDTConfidenceColorTheme(ctx, props) {
    var color = function () { return DefaultColor; };
    if (ctx.structure && ctx.structure.models.length > 0 && ctx.structure.models[0].customProperties.has(prop_1.PLDDTConfidenceProvider.descriptor)) {
        var getColor_1 = function (location) {
            var score = prop_1.PLDDTConfidence.getConfidenceScore(location)[1];
            if (props.type.name !== 'score') {
                var categoryProp = props.type.params.kind;
                if (score === categoryProp)
                    return ConfidenceColors[score];
            }
            return ConfidenceColors[score];
        };
        color = function (location) {
            if (structure_1.StructureElement.Location.is(location)) {
                return getColor_1(location);
            }
            return DefaultColor;
        };
    }
    return {
        factory: PLDDTConfidenceColorTheme,
        granularity: 'group',
        color: color,
        props: props,
        description: 'Assigns residue colors according to the pLDDT Confidence score.',
        legend: ConfidenceColorLegend
    };
}
exports.PLDDTConfidenceColorTheme = PLDDTConfidenceColorTheme;
exports.PLDDTConfidenceColorThemeProvider = {
    name: 'plddt-confidence',
    label: 'pLDDT Confidence',
    category: "Validation" /* Validation */,
    factory: PLDDTConfidenceColorTheme,
    getParams: getPLDDTConfidenceColorThemeParams,
    defaultValues: param_definition_1.ParamDefinition.getDefaultValues(getPLDDTConfidenceColorThemeParams({})),
    isApplicable: function (ctx) { var _a; return prop_1.PLDDTConfidence.isApplicable((_a = ctx.structure) === null || _a === void 0 ? void 0 : _a.models[0]); },
    ensureCustomProperties: {
        attach: function (ctx, data) { return data.structure ? prop_1.PLDDTConfidenceProvider.attach(ctx, data.structure.models[0], void 0, true) : Promise.resolve(); },
        detach: function (data) { return data.structure && prop_1.PLDDTConfidenceProvider.ref(data.structure.models[0], false); }
    }
};
