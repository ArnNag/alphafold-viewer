"use strict";
/**
 * Copyright (c) 2022 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Sebastian Bittrich <sebastian.bittrich@rcsb.org>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidationReportRSCCPreset = void 0;
var tslib_1 = require("tslib");
var representation_preset_1 = require("molstar/lib/mol-plugin-state/builder/structure/representation-preset");
var prop_1 = require("molstar/lib/extensions/rcsb/validation-report/prop");
var model_1 = require("molstar/lib/mol-model/structure/model");
var mol_state_1 = require("molstar/lib/mol-state");
var mol_task_1 = require("molstar/lib/mol-task");
exports.ValidationReportRSCCPreset = (0, representation_preset_1.StructureRepresentationPresetProvider)({
    id: 'preset-structure-representation-rcsb-validation-report-rscc',
    display: {
        name: 'Validation Report (RSCC)', group: 'Annotation',
        description: 'Color structure based on real-space correlation coefficients. Data from wwPDB Validation Report, obtained via RCSB PDB.'
    },
    isApplicable: function (a) {
        return a.data.models.length === 1 && prop_1.ValidationReport.isApplicable(a.data.models[0]) && model_1.Model.isFromXray(a.data.models[0]) && model_1.Model.probablyHasDensityMap(a.data.models[0]);
    },
    params: function () { return representation_preset_1.StructureRepresentationPresetProvider.CommonParams; },
    apply: function (ref, params, plugin) {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var structureCell, structure, colorTheme;
            var _this = this;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        structureCell = mol_state_1.StateObjectRef.resolveAndCheck(plugin.state.data, ref);
                        structure = (_a = structureCell === null || structureCell === void 0 ? void 0 : structureCell.obj) === null || _a === void 0 ? void 0 : _a.data;
                        if (!structureCell || !structure)
                            return [2 /*return*/, {}];
                        return [4 /*yield*/, plugin.runTask(mol_task_1.Task.create('Validation Report', function (runtime) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                return tslib_1.__generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, prop_1.ValidationReportProvider.attach({ runtime: runtime, assetManager: plugin.managers.asset }, structure.models[0])];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 1:
                        _b.sent();
                        colorTheme = RSCCColorThemeProvider.name;
                        return [2 /*return*/, representation_preset_1.PresetStructureRepresentations.auto.apply(ref, tslib_1.__assign(tslib_1.__assign({}, params), { theme: { globalName: colorTheme, focus: { name: colorTheme } } }), plugin)];
                }
            });
        });
    }
});
