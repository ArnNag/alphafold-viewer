"use strict";
/**
 * Copyright (c) 2022 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Sebastian Bittrich
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NakbPreset = void 0;
var tslib_1 = require("tslib");
var representation_preset_1 = require("molstar/lib/mol-plugin-state/builder/structure/representation-preset");
var mol_state_1 = require("molstar/lib/mol-state");
var reprBuilder = representation_preset_1.StructureRepresentationPresetProvider.reprBuilder;
var updateFocusRepr = representation_preset_1.StructureRepresentationPresetProvider.updateFocusRepr;
var CommonParams = representation_preset_1.StructureRepresentationPresetProvider.CommonParams;
var param_definition_1 = require("molstar/lib/mol-util/param-definition");
exports.NakbPreset = (0, representation_preset_1.StructureRepresentationPresetProvider)({
    id: 'preset-structure-representation-nakb',
    display: {
        name: 'NAKB', group: 'nakb',
        description: 'Shows polymers as Cartoon, ligands as Ball & Stick, carbohydrates as 3D-SNFG and water molecules semi-transparent. '
    },
    params: function () { return ((0, tslib_1.__assign)((0, tslib_1.__assign)({}, CommonParams), { nucleicColorTheme: param_definition_1.ParamDefinition.Optional(param_definition_1.ParamDefinition.Text('')), otherColorTheme: param_definition_1.ParamDefinition.Optional(param_definition_1.ParamDefinition.Text('')) })); },
    apply: function (ref, params, plugin) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var structureCell, components, structure, cartoonProps, waterType, lipidType, _l, update, builder, typeParams, ballAndStickColor, nucleicColorThemeName, color, representations;
            var _m;
            return (0, tslib_1.__generator)(this, function (_o) {
                switch (_o.label) {
                    case 0:
                        structureCell = mol_state_1.StateObjectRef.resolveAndCheck(plugin.state.data, ref);
                        if (!structureCell)
                            return [2 /*return*/, {}];
                        _m = {};
                        return [4 /*yield*/, (0, representation_preset_1.presetStaticComponent)(plugin, structureCell, 'nucleic')];
                    case 1:
                        _m.nucleic = _o.sent();
                        return [4 /*yield*/, (0, representation_preset_1.presetStaticComponent)(plugin, structureCell, 'protein')];
                    case 2:
                        _m.protein = _o.sent();
                        return [4 /*yield*/, (0, representation_preset_1.presetStaticComponent)(plugin, structureCell, 'ligand')];
                    case 3:
                        _m.ligand = _o.sent();
                        return [4 /*yield*/, (0, representation_preset_1.presetStaticComponent)(plugin, structureCell, 'branched', { label: 'Carbohydrate' })];
                    case 4:
                        _m.branched = _o.sent();
                        return [4 /*yield*/, (0, representation_preset_1.presetStaticComponent)(plugin, structureCell, 'water')];
                    case 5:
                        _m.water = _o.sent();
                        return [4 /*yield*/, (0, representation_preset_1.presetStaticComponent)(plugin, structureCell, 'ion')];
                    case 6:
                        _m.ion = _o.sent();
                        return [4 /*yield*/, (0, representation_preset_1.presetStaticComponent)(plugin, structureCell, 'lipid')];
                    case 7:
                        _m.lipid = _o.sent();
                        return [4 /*yield*/, (0, representation_preset_1.presetStaticComponent)(plugin, structureCell, 'coarse')];
                    case 8:
                        components = (_m.coarse = _o.sent(),
                            _m);
                        structure = structureCell.obj.data;
                        cartoonProps = {
                            sizeFactor: structure.isCoarseGrained ? 0.8 : 0.2,
                        };
                        waterType = (((_c = (_b = (_a = components.water) === null || _a === void 0 ? void 0 : _a.obj) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.elementCount) || 0) > 50000 ? 'line' : 'ball-and-stick';
                        lipidType = (((_f = (_e = (_d = components.lipid) === null || _d === void 0 ? void 0 : _d.obj) === null || _e === void 0 ? void 0 : _e.data) === null || _f === void 0 ? void 0 : _f.elementCount) || 0) > 20000 ? 'line' : 'ball-and-stick';
                        _l = reprBuilder(plugin, params, structure), update = _l.update, builder = _l.builder, typeParams = _l.typeParams, ballAndStickColor = _l.ballAndStickColor;
                        nucleicColorThemeName = params.nucleicColorTheme || 'residue-name';
                        color = params.otherColorTheme || 'entity-id';
                        representations = {
                            nucleic: builder.buildRepresentation(update, components.nucleic, { type: 'cartoon', typeParams: (0, tslib_1.__assign)((0, tslib_1.__assign)({}, typeParams), cartoonProps), color: nucleicColorThemeName }, { tag: 'nucleic' }),
                            protein: builder.buildRepresentation(update, components.protein, { type: 'cartoon', typeParams: (0, tslib_1.__assign)((0, tslib_1.__assign)({}, typeParams), cartoonProps), color: color }, { tag: 'protein' }),
                            ligand: builder.buildRepresentation(update, components.ligand, { type: 'ball-and-stick', typeParams: typeParams, color: color, colorParams: ballAndStickColor }, { tag: 'ligand' }),
                            branchedBallAndStick: builder.buildRepresentation(update, components.branched, { type: 'ball-and-stick', typeParams: (0, tslib_1.__assign)((0, tslib_1.__assign)({}, typeParams), { alpha: 0.3 }), color: color, colorParams: ballAndStickColor }, { tag: 'branched-ball-and-stick' }),
                            branchedSnfg3d: builder.buildRepresentation(update, components.branched, { type: 'carbohydrate', typeParams: typeParams, color: color }, { tag: 'branched-snfg-3d' }),
                            water: builder.buildRepresentation(update, components.water, { type: waterType, typeParams: (0, tslib_1.__assign)((0, tslib_1.__assign)({}, typeParams), { alpha: 0.6 }), color: color, colorParams: { carbonColor: { name: 'element-symbol', params: {} } } }, { tag: 'water' }),
                            ion: builder.buildRepresentation(update, components.ion, { type: 'ball-and-stick', typeParams: typeParams, color: color, colorParams: { carbonColor: { name: 'element-symbol', params: {} } } }, { tag: 'ion' }),
                            lipid: builder.buildRepresentation(update, components.lipid, { type: lipidType, typeParams: (0, tslib_1.__assign)((0, tslib_1.__assign)({}, typeParams), { alpha: 0.6 }), color: color, colorParams: { carbonColor: { name: 'element-symbol', params: {} } } }, { tag: 'lipid' }),
                            coarse: builder.buildRepresentation(update, components.coarse, { type: 'spacefill', typeParams: typeParams, color: color || 'chain-id' }, { tag: 'coarse' })
                        };
                        return [4 /*yield*/, update.commit({ revertOnError: false })];
                    case 9:
                        _o.sent();
                        return [4 /*yield*/, updateFocusRepr(plugin, structure, ((_h = (_g = params.theme) === null || _g === void 0 ? void 0 : _g.focus) === null || _h === void 0 ? void 0 : _h.name) || nucleicColorThemeName, (_k = (_j = params.theme) === null || _j === void 0 ? void 0 : _j.focus) === null || _k === void 0 ? void 0 : _k.params)];
                    case 10:
                        _o.sent();
                        return [2 /*return*/, { components: components, representations: representations }];
                }
            });
        });
    }
});
