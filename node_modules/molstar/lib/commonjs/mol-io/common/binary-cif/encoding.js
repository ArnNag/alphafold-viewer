"use strict";
/**
 * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * From CIFTools.js
 * @author David Sehnal <david.sehnal@gmail.com>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Encoding = exports.VERSION = void 0;
exports.VERSION = '0.3.0';
var Encoding;
(function (Encoding) {
    function getDataType(data) {
        var srcType;
        if (data instanceof Int8Array)
            srcType = 1 /* Encoding.IntDataType.Int8 */;
        else if (data instanceof Int16Array)
            srcType = 2 /* Encoding.IntDataType.Int16 */;
        else if (data instanceof Int32Array)
            srcType = 3 /* Encoding.IntDataType.Int32 */;
        else if (data instanceof Uint8Array)
            srcType = 4 /* Encoding.IntDataType.Uint8 */;
        else if (data instanceof Uint16Array)
            srcType = 5 /* Encoding.IntDataType.Uint16 */;
        else if (data instanceof Uint32Array)
            srcType = 6 /* Encoding.IntDataType.Uint32 */;
        else if (data instanceof Float32Array)
            srcType = 32 /* Encoding.FloatDataType.Float32 */;
        else if (data instanceof Float64Array)
            srcType = 33 /* Encoding.FloatDataType.Float64 */;
        else
            srcType = 3 /* Encoding.IntDataType.Int32 */; // throw new Error('Unsupported integer data type.');
        return srcType;
    }
    Encoding.getDataType = getDataType;
    function isSignedIntegerDataType(data) {
        if (data instanceof Int8Array || data instanceof Int16Array || data instanceof Int32Array)
            return true;
        for (var i = 0, _i = data.length; i < _i; i++) {
            if (i < 0)
                return false;
        }
        return true;
    }
    Encoding.isSignedIntegerDataType = isSignedIntegerDataType;
})(Encoding = exports.Encoding || (exports.Encoding = {}));
